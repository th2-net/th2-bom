import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'java-platform'
    id 'maven-publish'
    alias(libs.plugins.publish.plugin)
    id 'signing'
    alias(libs.plugins.dependencycheck)
    alias(libs.plugins.gradle.git.properties)
    alias(libs.plugins.dependency.license.report)
    alias(libs.plugins.download)
}

group = 'com.exactpro.th2'
version = release_version

dependencyLocking {
    lockAllConfigurations()
}

repositories {
    mavenCentral()
}

javaPlatform {
    allowDependencies()
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5

    nvd {
        apiKey = project.findProperty("nvdApiKey") as String
        delay = Integer.valueOf(project.findProperty("nvdDelay") as String)
        datafeedUrl = project.findProperty("nvdDatafeedUrl") as String
        datafeedUser = project.findProperty("nvdDatafeedUser") as String
        datafeedPassword = project.findProperty("nvdDatafeedPassword") as String
    }

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
        kev {
            url = project.findProperty("analyzersKnownExploitedURL") as String
            user = project.findProperty("analyzersKnownExploitedUser") as String
            password = project.findProperty("analyzersKnownExploitedPassword") as String
        }
    }
}

dependencies {
    api platform(libs.kotlin.bom)
    api platform(libs.grpc.bom)
    api platform(libs.jackson.bom)
    api platform(libs.java.driver.bom)
    api platform(libs.netty.bom)
    api platform(libs.log4j.bom)
    api platform(libs.slf4j.bom)

    constraints {
        // Libraries
        api(libs.amqp.client)

        api(libs.annotations)

        api(libs.commons.text)
        api(libs.commons.lang3)
        api(libs.commons.io)
        api(libs.commons.cli)
        api(libs.commons.collections4)

        api(libs.guava)

        api(libs.protobuf.java.util)
        api(libs.protoc)

        api("org.slf4j:slf4j-api")

        // Prometheus FIXME: remove when we have a facade in common
        api(libs.simpleclient)
        api(libs.simpleclient.hotspot)
        api(libs.simpleclient.httpserver)
        api(libs.simpleclient.log4j2)
        api(libs.simpleclient.log4j)

        api(libs.gson) {
            because("the 2.8.9 version has CVE-2025-53864 vulnerability")
        }
    }
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if (task.name == 'initializeSonatypeStagingRepository' &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publishing {
        publications {
            th2Platform(MavenPublication) {
                from components.javaPlatform
                pom {
                    name = rootProject.name
                    description = rootProject.description
                    url = vcs_url
                    scm {
                        url = vcs_url
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'developer'
                            name = 'developer'
                            email = 'developer@exactpro.com'
                        }
                    }
                    scm {
                        url = vcs_url
                    }
                }
            }
        }
    }
    repositories {
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.th2Platform
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [
            new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
    ]
    renderers = [
            new JsonReportRenderer('licenses.json', false),
    ]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}