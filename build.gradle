plugins {
    id 'java-platform'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
}

ext {
    sharedDir           = file('shared')

    cradleVersion       = '2.1.0'

    slf4jVersion        = '1.7.30'
    grpcVersion         = '1.32.1'
    protobufVersion     = '3.13.0'
    jacksonVersion      = '2.11.2'
    prometheusVersion   = '0.9.0'
}

group = 'com.exactpro.th2'
version = release_version

repositories {
    mavenCentral()
}

javaPlatform {
    allowDependencies()
}

dependencies {
    constraints {
        // Libraries
        api("com.rabbitmq:amqp-client:5.9.0")
        api("com.datastax.cassandra:cassandra-driver-core:3.6.0")

        api("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        api("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        api("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        api("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
        api("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
        api("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

        api("org.jetbrains:annotations:20.0.0")

        api("org.apache.commons:commons-lang3:3.8.1")

        api("com.google.guava:guava:29.0-jre")

        api("com.google.protobuf:protobuf-java-util:${protobufVersion}")
        api("com.google.protobuf:protoc:${protobufVersion}")
        api("io.grpc:grpc-protobuf:${grpcVersion}")
        api("io.grpc:grpc-stub:${grpcVersion}")
        api("io.grpc:grpc-core:${grpcVersion}")
        api("io.grpc:grpc-netty:${grpcVersion}")
        api("io.grpc:protoc-gen-grpc-java:${grpcVersion}")

        api("org.slf4j:slf4j-api:${slf4jVersion}")
        api("org.slf4j:slf4j-log4j12:${slf4jVersion}")

        // Prometheus FIXME: remove when we have a facade in common
        api("io.prometheus:simpleclient:${prometheusVersion}")
        api("io.prometheus:simpleclient_hotspot:${prometheusVersion}")
        api("io.prometheus:simpleclient_httpserver:${prometheusVersion}")
    }
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
            project.hasProperty('nexus_user') &&
            project.hasProperty('nexus_password') &&
            project.hasProperty('nexus_url')) ||
        (repository == publishing.repositories.sonatype &&
            project.hasProperty('sonatypeUsername') &&
            project.hasProperty('sonatypePassword')) ||
        (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
        project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
        !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publishing {
        publications {
            th2Platform(MavenPublication) {
                from components.javaPlatform
                pom {
                  name = rootProject.name
                  description = rootProject.description
                  url = vcs_url
                  scm {
                    url = vcs_url
                  }
                  licenses {
                    license {
                      name = 'The Apache License, Version 2.0'
                      url = 'http://www.apache.org/licenses/LICENSE-2.0.    txt'
                    }
                  }
                  developers {
                    developer {
                      id = 'developer'
                      name = 'developer'
                      email = 'developer@exactpro.com'
                    }
                  }
                  scm {
                    url = vcs_url
                  }
               }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.th2Platform
}

clean {
    delete sharedDir
}

