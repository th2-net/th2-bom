plugins {
    id 'java-platform'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id 'signing'
    id "org.owasp.dependencycheck" version "9.0.9"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

ext {
    slf4jVersion = '2.0.7'
    log4jVersion = '2.23.0'
    grpcVersion = '1.62.2'
    protobufVersion = '3.25.3'
    jacksonVersion = '2.16.1'
    prometheusVersion = '0.16.0'
    cassandraDriver = '4.17.0'
    nettyVersion = '4.1.108.Final'
}

group = 'com.exactpro.th2'
version = release_version

dependencyLocking {
    lockAllConfigurations()
}

repositories {
    mavenCentral()
}

javaPlatform {
    allowDependencies()
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

dependencies {
    api platform('org.jetbrains.kotlin:kotlin-bom:1.8.22')
    api platform("io.grpc:grpc-bom:$grpcVersion")
    api platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion")
    api platform("com.datastax.oss:java-driver-bom:$cassandraDriver")
    api platform("io.netty:netty-bom:$nettyVersion")
    api platform("org.apache.logging.log4j:log4j-bom:$log4jVersion")

    constraints {
        // Libraries
        api("com.rabbitmq:amqp-client:5.20.0")

        api("org.jetbrains:annotations:24.1.0")

        api("org.apache.commons:commons-text:1.11.0")
        api("org.apache.commons:commons-lang3:3.14.0")
        api('commons-io:commons-io:2.15.1')
        api("commons-cli:commons-cli:1.6.0")
        api("org.apache.commons:commons-collections4:4.4")

        api("com.google.guava:guava:33.0.0-jre")

        api("com.google.protobuf:protobuf-java-util:${protobufVersion}")
        api("com.google.protobuf:protoc:${protobufVersion}")

        api("org.slf4j:slf4j-api:${slf4jVersion}")

        // Prometheus FIXME: remove when we have a facade in common
        api("io.prometheus:simpleclient:${prometheusVersion}")
        api("io.prometheus:simpleclient_hotspot:${prometheusVersion}")
        api("io.prometheus:simpleclient_httpserver:${prometheusVersion}")
        api("io.prometheus:simpleclient_log4j2:${prometheusVersion}")
        api("io.prometheus:simpleclient_log4j:${prometheusVersion}")
    }
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if (task.name == 'initializeSonatypeStagingRepository' &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publishing {
        publications {
            th2Platform(MavenPublication) {
                from components.javaPlatform
                pom {
                    name = rootProject.name
                    description = rootProject.description
                    url = vcs_url
                    scm {
                        url = vcs_url
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'developer'
                            name = 'developer'
                            email = 'developer@exactpro.com'
                        }
                    }
                    scm {
                        url = vcs_url
                    }
                }
            }
        }
    }
    repositories {
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.th2Platform
}